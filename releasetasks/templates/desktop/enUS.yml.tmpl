{% for platform, platform_info in en_US_config["platforms"].iteritems() %}

{% if push_to_candidates_enabled %}  # beetmover
{% set complete_beetmover_basename = "release-{}_{}_{}_complete_en-US_beetmover_candidates".format(branch, product, platform) %}
{% do artifact_completes_builders.append(complete_beetmover_basename) %}
-
    taskId: "{{ stableSlugId(complete_beetmover_basename) }}"
    requires:
        - "{{ stableSlugId("beetmove_image") }}"
    reruns: 5
    task:
        provisionerId: {{ provisionerid(platform) }}
        workerType: {{ workertype(platform) }}
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.beetmover.en_US.{{ platform }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.beetmover.en_US.{{ platform }}
        payload:
            maxRunTime: 7200
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: {{ stableSlugId("beetmove_image") }}
            command:
                - /bin/bash
                - -c
                - >
                  wget -O mozharness.tar.bz2 https://hg.mozilla.org/{{ repo_path }}/archive/{{ mozharness_changeset }}.tar.bz2/testing/mozharness &&
                  mkdir mozharness && tar xvfj mozharness.tar.bz2 -C mozharness --strip-components 3 && cd mozharness &&
                  python scripts/release/beet_mover.py --no-refresh-antivirus --template configs/beetmover/en_us_signing.yml.tmpl --platform {{ buildbot2ftp(platform) }} --product {{ product }} --version {{ version }} --app-version {{ appVersion }} --locale en-US --taskid {{ platform_info['signed_task_id'] }} --build-num build{{ buildNumber }} --bucket {{ beetmover_candidates_bucket }} &&
                  python scripts/release/beet_mover.py --no-refresh-antivirus --template configs/beetmover/en_us_build.yml.tmpl --platform {{ buildbot2ftp(platform) }} --product {{ product }} --version {{ version }} --app-version {{ appVersion }} --locale en-US --taskid {{ platform_info['unsigned_task_id'] }} --build-num build{{ buildNumber }} --bucket {{ beetmover_candidates_bucket }}
            env:
                DUMMY_ENV_FOR_ENCRYPT: "fake"
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId(complete_beetmover_basename), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_ACCESS_KEY_ID',
                                   beetmover_aws_access_key_id) }}
                - {{ encrypt_env_var(stableSlugId(complete_beetmover_basename), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_SECRET_ACCESS_KEY',
                                   beetmover_aws_secret_access_key) }}
        metadata:
            name: "[beetmover] {{ product }} {{ branch }} {{ platform }} en_US completes candidates"
            description: "moves artifacts for en_US based builds to candidates dir"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ common_extras(taskname=complete_beetmover_basename, locales=["en-US"], platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: en-US
                groupSymbol: BM
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}
            {{ task_notifications(taskname="[beetmover] {} {} {} en_US completes candidates".format(product, branch, platform), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}


{% endif %}  # push_to_candidates_enabled

{% if updates_enabled %}  # funsize
{% set locale = "en-US" %}
{% for partial_version, partial_info in partial_updates.iteritems() %}
{# The basename needs to be unique across all jobs in this graph, so we need to
   take into account everything about it that we can have more than one of in a
   single graph (platform, locale, partial_version, and build number). Notable
   things that aren't included in this:
   * branch, product - because funsize isn't implemented in Buildbot we don't
                       need any sort of "builder name" (that's what taskId and
                       taskGraphId are for!)
#}
{% set funsize_basename = "{}_{}_{}build{}_funsize".format(platform, locale, partial_version, partial_info["buildNumber"]) %}
-
    taskId: "{{ stableSlugId('{}_update_generator'.format(funsize_basename)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId("funsize_update_generator_image") }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] Update generating task {{ platform }} {{ locale }} for {{ partial_version }}"
            description: |
                This task generates MAR files and publishes unsigned bits.

        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
        extra:
            {{ task_notifications(taskname="[funsize] Update generating task {} {} for {}".format(platform, locale, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12)}}
            {{ common_extras(taskname='{}_update_generator'.format(funsize_basename), locales=["en-US"], platform=platform) | indent(12)}}
            funsize:
                partials:
                    -
                        locale: {{ locale }}
                        # TODO: consider using stable URL for from_mar
                        from_mar: "http://download.mozilla.org/?product={{ product }}-{{ partial_version }}-complete&os={{ buildbot2bouncer(platform) }}&lang={{ locale }}"
                        {# TC based tasks have different signed/unsigned tasks and use a slightly different URL #}
                        {% if platform_info["signed_task_id"] != platform_info["unsigned_task_id"] %}
                        to_mar: "https://queue.taskcluster.net/v1/task/{{ platform_info["signed_task_id"] }}/artifacts/public/build/update/target.complete.mar"
                        {% else %}
                        to_mar: "https://queue.taskcluster.net/v1/task/{{ platform_info["signed_task_id"] }}/artifacts/public/build/{{ product }}-{{ appVersion }}.{{ locale }}.{{ buildbot2ftp(platform) }}.complete.mar"
                        {% endif %}
                        platform: {{ platform }}
                        branch: {{ branch }}
                        previousVersion: "{{ partial_version }}"
                        previousBuildNumber: {{ partial_info["buildNumber"] }}
                        toVersion: "{{ version }}"
                        toBuildNumber: {{ buildNumber }}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ locale }}-{{ partial_version }}-g
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        workerType: "funsize-mar-generator"
        provisionerId: "aws-provisioner-v1"

        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: "{{ stableSlugId("funsize_update_generator_image") }}"
            maxRunTime: 3600
            command:
                - /runme.sh

            env:
                FILENAME_TEMPLATE: "{{ funsize_product }}-{{ partial_version }}-{{ version }}.en-US.{{ buildbot2ftp(platform) }}.partial.mar"
                {% if moz_disable_mar_cert_verification is defined and moz_disable_mar_cert_verification %}
                MOZ_DISABLE_MAR_CERT_VERIFICATION: {{ moz_disable_mar_cert_verification }}
                {% endif %}
                SIGNING_CERT: {{ signing_cert }}
                {% if accepted_mar_channel_id is defined and accepted_mar_channel_id %}
                # explicitly set MAR channel name, ACCEPTED_MAR_CHANNEL_IDS is the corresponding variable in funsize.py
                ACCEPTED_MAR_CHANNEL_IDS: {{ accepted_mar_channel_id }}
                {% endif %}
                EXTRA_PARAMS: "--no-freshclam"

            artifacts:
                "public/env":
                    path: /home/worker/artifacts/
                    type: directory
                    expires: "{{ never }}"

-
    taskId: "{{ stableSlugId('{}_signing_task'.format(funsize_basename)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId('{}_update_generator'.format(funsize_basename)) }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] MAR signing task {{ platform }} {{ locale }} for {{ partial_version }}"
            description: |
                This task signs MAR files and publishes signed bits.

        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_signing.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_signing.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
        extra:
            {{ task_notifications(taskname="[funsize] MAR signing task {} {} for {}".format(platform, locale, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12)}}
            {{ common_extras(taskname='{}_signing_task'.format(funsize_basename), locales=["en-US"], platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ locale }}-{{ partial_version }}-s
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        workerType: "signing-worker-v1"
        provisionerId: "signing-provisioner-v1"
        scopes:
            - project:releng:signing:cert:{{ signing_class }}
            - project:releng:signing:format:gpg
            - project:releng:signing:format:mar
        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            signingManifest: "https://queue.taskcluster.net/v1/task/{{ stableSlugId('{}_update_generator'.format(funsize_basename)) }}/artifacts/public/env/manifest.json"

{% do balrog_submission_builders.append('{}_balrog_task'.format(funsize_basename)) %}
-
    taskId: "{{ stableSlugId('{}_balrog_task'.format(funsize_basename)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId('{}_signing_task'.format(funsize_basename)) }}"
        - "{{ stableSlugId("funsize_balrog_image") }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_balrog.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_balrog.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
        extra:
            {{ task_notifications(taskname="[funsize] Publish to Balrog {} {} for {}".format(platform, locale, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12)}}
            {{ common_extras(taskname='{}_balrog_task'.format(funsize_basename), locales=["en-US"], platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ locale }}-{{ partial_version }}-u
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] Publish to Balrog {{ platform }} {{ locale }} for {{ partial_version }}"
            description: |
                This task publishes signed updates to Balrog.

        workerType: "funsize-balrog"
        provisionerId: "aws-provisioner-v1"
        {% if signing_class != "dep-signing" %}
        scopes:
            - docker-worker:feature:balrogVPNProxy
        {% endif %}
        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: "{{ stableSlugId("funsize_balrog_image") }}"
            maxRunTime: 1800
            command:
                - /runme.sh

            artifacts:
                "public/env":
                    path: /home/worker/artifacts/
                    type: directory
                    expires: "{{ never }}"
            env:
                {% if moz_disable_mar_cert_verification is defined and moz_disable_mar_cert_verification%}
                MOZ_DISABLE_MAR_CERT_VERIFICATION: {{ moz_disable_mar_cert_verification }}
                {% endif %}
                SIGNING_CERT: {{ signing_cert }}
                PARENT_TASK_ARTIFACTS_URL_PREFIX: "https://queue.taskcluster.net/v1/task/{{ stableSlugId('{}_signing_task'.format(funsize_basename)) }}/artifacts/public/env"
                BALROG_API_ROOT: {{ funsize_balrog_api_root }}
                # TODO: should funsize be publishing to an s3 bucket? or will beetmover do that?
                {% if extra_balrog_submitter_params is defined %}
                EXTRA_BALROG_SUBMITTER_PARAMS: "{{ extra_balrog_submitter_params }}"
                {% endif %}
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId('{}_balrog_task'.format(funsize_basename)), now_ms,
                                    now_ms + 24 * 4 * 3600 * 1000, "BALROG_USERNAME",
                                    balrog_username) }}
                - {{ encrypt_env_var(stableSlugId('{}_balrog_task'.format(funsize_basename)), now_ms,
                                    now_ms + 24 * 4 * 3600 * 1000, "BALROG_PASSWORD",
                                    balrog_password) }}
            {% if signing_class != "dep-signing" %}
            features:
                balrogVPNProxy: true
            {% endif %}

{% if push_to_candidates_enabled %}  # beetmover partials
{% set partial_beetmover_basename = "release-{}_{}_{}_partial_en-US_{}build{}_beetmover_candidates".format(branch, product, platform, partial_version, partial_info["buildNumber"]) %}
{% do artifact_partials_builders.append(partial_beetmover_basename) %}
-
    taskId: "{{ stableSlugId(partial_beetmover_basename) }}"
    requires:
        - "{{ stableSlugId('{}_signing_task'.format(funsize_basename)) }}"
        - "{{ stableSlugId("beetmove_image") }}"
    reruns: 5
    task:
        provisionerId: {{ provisionerid(platform) }}
        workerType: {{ workertype(platform) }}
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_beetmover.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_beetmover.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ locale }}
        payload:
            maxRunTime: 7200
            # TODO - create specific image for this
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: {{ stableSlugId("beetmove_image") }}
            command:
                - /bin/bash
                - -c
                - >
                  wget -O mozharness.tar.bz2 https://hg.mozilla.org/{{ repo_path }}/archive/{{ mozharness_changeset }}.tar.bz2/testing/mozharness &&
                  mkdir mozharness && tar xvfj mozharness.tar.bz2 -C mozharness --strip-components 3 && cd mozharness &&
                  python scripts/release/beet_mover.py --no-refresh-antivirus --template configs/beetmover/partials.yml.tmpl --platform {{ buildbot2ftp(platform) }} --product {{ product }} --version {{ version }} --partial-version {{ partial_version }} --artifact-subdir env --locale en-US --taskid {{ stableSlugId('{}_signing_task'.format(funsize_basename)) }} --build-num build{{ buildNumber }} --bucket {{ beetmover_candidates_bucket }}
            env:
                DUMMY_ENV_FOR_ENCRYPT: "fake"
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId(partial_beetmover_basename), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_ACCESS_KEY_ID',
                                   beetmover_aws_access_key_id) }}
                - {{ encrypt_env_var(stableSlugId(partial_beetmover_basename), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_SECRET_ACCESS_KEY',
                                   beetmover_aws_secret_access_key) }}
        metadata:
            name: "[beetmover] {{ product }} {{ branch }} {{ platform }} en_US partials candidates"
            description: "moves partial artifacts for en_US based builds to candidates dir"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ task_notifications(taskname="[beetmover] {} {} {} en_US partials candidates".format(product, branch, platform), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12)}}
            {{ common_extras(taskname=partial_beetmover_basename, locales=["en-US"], platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: en-US-{{ partial_version }}
                groupSymbol: BM
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}
{% endif %}  # push_to_candidates_enabled

{% endfor %} # partials
{% endif %}  # updates_enabled

{% endfor %} # platforms
