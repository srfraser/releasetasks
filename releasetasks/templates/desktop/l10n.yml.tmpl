{% for platform, platform_info in l10n_config["platforms"].iteritems() %}
{% for chunk in range(1, platform_info["chunks"] + 1) %}
{% set our_locales = chunkify(sorted(platform_info["locales"]), chunk, platform_info["chunks"]) %}
# TODO: make a helper function to generate consistent builder names?
{% set buildername = "release-{}_{}_{}_l10n_repack".format(branch, product, platform) %}
-
    # We have multiple chunks of l10n per platform, so we need unique task ids
    # for each of them. However, they all share the same builder because the
    # only differences between them are in the properties that we set.
    taskId: "{{ stableSlugId('{}_{}'.format(buildername, chunk)) }}"
    reruns: 5
    task:
        provisionerId: "buildbot-bridge"
        workerType: "buildbot-bridge"
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        scopes:
            - project:releng:buildbot-bridge:builder-name:{{ buildername }}
        routes:
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.l10n.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.l10n.{{ platform }}.{{ chunk }}
        payload:
            buildername: "{{ buildername }}"
            sourcestamp:
                branch: "{{ repo_path }}"
                revision: "{{ mozharness_changeset }}"
            properties:
                product: "{{ product }}"
                en_us_binary_url: "{{ platform_info['en_us_binary_url'] }}"
                mar_tools_url: "{{ platform_info['mar_tools_url'] }}"
                # Quotes cannot be used around this string because the loop causes it to have trailing whitespace
                # (which gets stripped by the yaml parser when unquoted). Kindof hacky.
                locales: {% for l in our_locales %}{{ "{}:{} ".format(l, l10n_config["changesets"][l]) }}{% endfor %}
                version: "{{ version }}"
                build_number: {{ buildNumber }}
                repo_path: "{{ repo_path }}"
                # TODO is this used?
                script_repo_revision: "{{ mozharness_changeset }}"
                release_promotion: true
                revision: "{{ mozharness_changeset }}"
                artifactsTaskId: "{{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }}"

        metadata:
            name: "{{ product }} {{ branch }} {{ platform }} l10n repack {{ chunk }}/{{ platform_info["chunks"] }}"
            description: "Release Promotion l10n repack job"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ common_extras(taskname='{}_{}'.format(buildername, chunk), locales=our_locales, platform=platform) | indent(12)}}
            {{ task_notifications("{} {} {} l10n repack {}/{}".format(product, branch, platform, chunk, platform_info.chunks), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}

-
    # Every l10n task requires a special task to attach all artifacts
    taskId: "{{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }}"
    reruns: 5
    task:
        provisionerId: "null-provisioner"
        workerType: "buildbot"
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        scopes:
            - project:releng:buildbot-bridge:builder-name:{{ buildername }}
        routes:
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.l10n_artifacts.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.l10n_artifacts.{{ platform }}.{{ chunk }}
        payload:
            description: "required"
        metadata:
            name: "{{ product }} {{ branch }} {{ platform }} l10n repack artifacts {{ chunk }}/{{ platform_info["chunks"] }}"
            description: "Release Promotion l10n artifacts"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ common_extras(taskname='{}_artifacts_{}'.format(buildername, chunk), locales=our_locales, platform=platform) | indent(12)}}
            {{ task_notifications("{} {} {} l10n repack artifacts {}/{}".format(product, branch, platform, chunk, platform_info.chunks), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}

# repacks beetmover
{% if push_to_candidates_enabled %}
{% do artifact_completes_builders.append('{}_beetmover_candidates_{}'.format(buildername, chunk)) %}
-
    taskId: "{{ stableSlugId('{}_beetmover_candidates_{}'.format(buildername, chunk)) }}"
    requires:
        - "{{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }}"
        - "{{ stableSlugId("beetmove_image") }}"
    reruns: 5
    task:
        provisionerId: {{ provisionerid(platform) }}
        workerType: {{ workertype(platform) }}
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.beetmover.{{ chunk }}.{{ platform }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.beetmover.{{ chunk }}.{{ platform }}
        payload:
            maxRunTime: 7200
            # TODO - create specific image for this
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: {{ stableSlugId("beetmove_image") }}
            command:
                - /bin/bash
                - -c
                - >
                  wget -O mozharness.tar.bz2 https://hg.mozilla.org/{{ repo_path }}/archive/{{ mozharness_changeset }}.tar.bz2/testing/mozharness &&
                  mkdir mozharness && tar xvfj mozharness.tar.bz2 -C mozharness --strip-components 3 && cd mozharness &&
                  python scripts/release/beet_mover.py --no-refresh-antivirus --template configs/beetmover/repacks.yml.tmpl --platform {{ buildbot2ftp(platform) }} --product {{ product }} --version {{ version }} --app-version {{ appVersion }} {% for l in our_locales %}{{ "--locale {} ".format(l) }}{% endfor %} --taskid {{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }} --build-num build{{ buildNumber }} --bucket {{ beetmover_candidates_bucket }}
            env:
                DUMMY_ENV_FOR_ENCRYPT: "fake"
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId('{}_beetmover_candidates_{}'.format(buildername, chunk)), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_ACCESS_KEY_ID',
                                   beetmover_aws_access_key_id) }}
                - {{ encrypt_env_var(stableSlugId('{}_beetmover_candidates_{}'.format(buildername, chunk)), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_SECRET_ACCESS_KEY',
                                   beetmover_aws_secret_access_key) }}
        metadata:
            name: "[beetmover] {{ product }} {{ branch }} {{ platform }} locales completes candidates {{ chunk }}/{{ platform_info["chunks"] }}"
            description: "moves artifacts for locale based builds to candidates dir"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ task_notifications("[beetmover] {} {} {} locales completes candidates {}/{}".format(product, branch, platform, chunk, platform_info.chunks), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}
            {{ common_extras(taskname='{}_beetmover_candidates_{}'.format(buildername, chunk), locales=our_locales, platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: l10n-{{ chunk }}
                groupSymbol: BM
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}
            {{ task_notifications("[beetmover] {} {} {} locales completes candidates {}/{}".format(product, branch, platform, chunk, platform_info.chunks), failed=["releasetasks"], exception=["releasetasks"], completed=["releasetasks"]) | indent(12) }}

{% endif %}

{% if updates_enabled %}  # funsize
{% for partial_version, partial_info in partial_updates.iteritems() %}
{% set chunk_locales = [] %}
{% for l in our_locales %}
{% if l in partial_info["locales"] %}
{% do chunk_locales.append(l) %}
{% endif %}
{% endfor %}
-
    taskId: "{{ stableSlugId('{}_{}_{}_update_generator'.format(buildername, chunk, partial_version)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }}"
        - "{{ stableSlugId("funsize_update_generator_image") }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] Update generating task {{ platform }} chunk {{ chunk }} for {{ partial_version }}"
            description: |
                This task generates MAR files and publishes unsigned bits for the locales {{ chunk_locales|join(', ') }}
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
        extra:
            {{ task_notifications("[funsize] Update generating task {} chunk {} for {}".format(platform, chunk, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}
            {{ common_extras(taskname='{}_{}_{}_update_generator'.format(buildername, chunk, partial_version), locales=chunk_locales, platform=platform) | indent(12)}}
            funsize:
                partials:
{% for locale in chunk_locales %}
                    -
                        locale: {{ locale }}
                        # TODO: consider using stable URL for from_mar
                        from_mar: "http://download.mozilla.org/?product={{ product }}-{{ partial_version }}-complete&os={{ buildbot2bouncer(platform) }}&lang={{ locale }}"
                        to_mar: "https://queue.taskcluster.net/v1/task/{{ stableSlugId('{}_artifacts_{}'.format(buildername, chunk)) }}/artifacts/public/build/{{ funsize_product }}-{{ appVersion }}.{{ locale }}.{{ buildbot2ftp(platform) }}.complete.mar"
                        platform: {{ platform }}
                        branch: {{ branch }}
                        previousVersion: "{{ partial_version }}"
                        previousBuildNumber: {{ partial_info["buildNumber"] }}
                        toVersion: "{{ version }}"
                        toBuildNumber: {{ buildNumber }}
{% endfor %}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ chunk }}-{{ partial_version }}-g
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        workerType: "funsize-mar-generator"
        provisionerId: "aws-provisioner-v1"

        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: "{{ stableSlugId("funsize_update_generator_image") }}"
            maxRunTime: 7200
            command:
                - /runme.sh

            env:
                # {locale} is interpreted by funsize, don't use double brackets
                FILENAME_TEMPLATE: "{{ funsize_product }}-{{ partial_version }}-{{ version }}.{locale}.{{ buildbot2ftp(platform) }}.partial.mar"
                {% if moz_disable_mar_cert_verification is defined and moz_disable_mar_cert_verification %}
                MOZ_DISABLE_MAR_CERT_VERIFICATION: {{ moz_disable_mar_cert_verification }}
                {% endif %}
                SIGNING_CERT: {{ signing_cert }}
                {% if accepted_mar_channel_id is defined and accepted_mar_channel_id %}
                # explicitly set MAR channel name, ACCEPTED_MAR_CHANNEL_IDS is the corresponding variable in funsize.py
                ACCEPTED_MAR_CHANNEL_IDS: {{ accepted_mar_channel_id }}
                {% endif %}

                EXTRA_PARAMS: "--no-freshclam"

            artifacts:
                "public/env":
                    path: /home/worker/artifacts/
                    type: directory
                    expires: "{{ never }}"

-
    taskId: "{{ stableSlugId('{}_{}_{}_signing_task'.format(buildername, chunk, partial_version)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId('{}_{}_{}_update_generator'.format(buildername, chunk, partial_version)) }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] MAR signing task {{ platform }} chunk {{ chunk }} for {{ partial_version }}"
            description: |
                This task signs MAR files and publishes signed bits for the locales {{ chunk_locales|join(', ') }}

        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_signing.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_signing.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
        extra:
            {{ task_notifications("[funsize] MAR signing task {} chunk {} for {}".format(platform, chunk, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}
            {{ common_extras(taskname='{}_{}_{}_signing_task'.format(buildername, chunk, partial_version), locales=chunk_locales, platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ chunk }}-{{ partial_version }}-s
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        workerType: "signing-worker-v1"
        provisionerId: "signing-provisioner-v1"
        scopes:
            - project:releng:signing:cert:{{ signing_class }}
            - project:releng:signing:format:gpg
            - project:releng:signing:format:mar
        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            signingManifest: "https://queue.taskcluster.net/v1/task/{{ stableSlugId('{}_{}_{}_update_generator'.format(buildername, chunk, partial_version)) }}/artifacts/public/env/manifest.json"

{% do balrog_submission_builders.append('{}_{}_{}_balrog_task'.format(buildername, chunk, partial_version)) %}
-
    taskId: "{{ stableSlugId('{}_{}_{}_balrog_task'.format(buildername, chunk, partial_version)) }}"
    reruns: 5
    requires:
        - "{{ stableSlugId('{}_{}_{}_signing_task'.format(buildername, chunk, partial_version)) }}"
        - "{{ stableSlugId("funsize_balrog_image") }}"
    task:
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_balrog.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_balrog.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
        extra:
            {{ task_notifications("[funsize] Publish to Balrog {} chunk {} for {}".format(platform, chunk, partial_version), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}
            {{ common_extras(taskname='{}_{}_{}_balrog_task'.format(buildername, chunk, partial_version), locales=chunk_locales, platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: {{ chunk }}-{{ partial_version }}-u
                groupSymbol: Update
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}

        metadata:
            owner: release+funsize@mozilla.com
            source: https://github.com/mozilla/funsize
            name: "[funsize] Publish to Balrog {{ platform }} chunk {{ chunk }} for {{ partial_version }}"
            description: |
                This task publishes signed updates to Balrog for the locales {{ chunk_locales|join(", ")}}.

        workerType: "funsize-balrog"
        provisionerId: "aws-provisioner-v1"
        {% if signing_class != "dep-signing" %}
        scopes:
            - docker-worker:feature:balrogVPNProxy
        {% endif %}
        tags:
            createdForUser: release+funsize@mozilla.com

        payload:
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: "{{ stableSlugId("funsize_balrog_image") }}"
            maxRunTime: 1800
            command:
                - /runme.sh

            artifacts:
               "public/env":
                   path: /home/worker/artifacts/
                   type: directory
                   expires: "{{ never }}"

            env:
                {% if moz_disable_mar_cert_verification is defined and moz_disable_mar_cert_verification %}
                MOZ_DISABLE_MAR_CERT_VERIFICATION: {{ moz_disable_mar_cert_verification }}
                {% endif %}
                SIGNING_CERT: {{ signing_cert }}
                PARENT_TASK_ARTIFACTS_URL_PREFIX: "https://queue.taskcluster.net/v1/task/{{ stableSlugId('{}_{}_{}_signing_task'.format(buildername, chunk, partial_version)) }}/artifacts/public/env"
                BALROG_API_ROOT: {{ funsize_balrog_api_root }}
                # TODO: should funsize be publishing to an s3 bucket? or will beetmover do that?
                {% if extra_balrog_submitter_params is defined %}
                EXTRA_BALROG_SUBMITTER_PARAMS: "{{ extra_balrog_submitter_params }}"
                {% endif %}
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId('{}_{}_{}_balrog_task'.format(buildername, chunk, partial_version)), now_ms,
                                    now_ms + 24 * 4 * 3600 * 1000, "BALROG_USERNAME",
                                    balrog_username) }}
                - {{ encrypt_env_var(stableSlugId('{}_{}_{}_balrog_task'.format(buildername, chunk, partial_version)), now_ms,
                                    now_ms + 24 * 4 * 3600 * 1000, "BALROG_PASSWORD",
                                    balrog_password) }}
            {% if signing_class != "dep-signing" %}
            features:
                balrogVPNProxy: true
            {% endif %}

# repacks beetmover
{% if push_to_candidates_enabled %}
{% set partial_beetmover_buildername = "{}_partial_{}build{}_beetmover_candidates_{}".format(buildername, partial_version, partial_info["buildNumber"], chunk) %}
{% do artifact_partials_builders.append(partial_beetmover_buildername) %}
-
    taskId: "{{ stableSlugId(partial_beetmover_buildername) }}"
    requires:
        - "{{ stableSlugId('{}_{}_{}_signing_task'.format(buildername, chunk, partial_version)) }}"
        - "{{ stableSlugId("beetmove_image") }}"
    reruns: 5
    task:
        provisionerId: {{ provisionerid(platform) }}
        workerType: {{ workertype(platform) }}
        created: "{{ now }}"
        deadline: "{{ now.replace(days=4) }}"
        expires: "{{ never }}"
        priority: "high"
        retries: 5
        routes:
            - tc-treeherder-stage.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - tc-treeherder.v2.{{ branch }}.{{ revision }}.{{ pushlog_id }}
            - index.releases.v1.{{ branch }}.{{ revision }}.{{ product }}.{{ version | replace(".", "_") }}.build{{ buildNumber }}.partials_beetmover.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
            - index.releases.v1.{{ branch }}.latest.{{ product }}.latest.partials_beetmover.{{ partial_version | replace(".", "_") }}.{{ platform }}.{{ chunk }}
        payload:
            maxRunTime: 7200
            image:
                type: task-image
                path: public/image.tar.zst
                taskId: {{ stableSlugId("beetmove_image") }}
            command:
                - /bin/bash
                - -c
                - >
                  wget -O mozharness.tar.bz2 https://hg.mozilla.org/{{ repo_path }}/archive/{{ mozharness_changeset }}.tar.bz2/testing/mozharness &&
                  mkdir mozharness && tar xvfj mozharness.tar.bz2 -C mozharness --strip-components 3 && cd mozharness &&
                  python scripts/release/beet_mover.py --template configs/beetmover/partials.yml.tmpl --platform {{ buildbot2ftp(platform) }} --product {{ product }} --version {{ version }} --partial-version {{ partial_version }} --artifact-subdir env {% for l in chunk_locales %}{{ "--locale {} ".format(l) }}{% endfor %} --taskid {{ stableSlugId('{}_{}_{}_signing_task'.format(buildername, chunk, partial_version)) }} --build-num build{{ buildNumber }} --bucket {{ beetmover_candidates_bucket }} --no-refresh-antivirus
            env:
                DUMMY_ENV_FOR_ENCRYPT: "fake"
            encryptedEnv:
                - {{ encrypt_env_var(stableSlugId(partial_beetmover_buildername), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_ACCESS_KEY_ID',
                                   beetmover_aws_access_key_id) }}
                - {{ encrypt_env_var(stableSlugId(partial_beetmover_buildername), now_ms,
                                   now_ms + 24 * 4 * 3600 * 1000, 'AWS_SECRET_ACCESS_KEY',
                                   beetmover_aws_secret_access_key) }}
        metadata:
            name: "[beetmover] {{ product }} {{ branch }} {{ platform }} locales partials candidates {{ chunk }}/{{ platform_info["chunks"] }}"
            description: "moves partial artifacts for locale based builds to candidates dir"
            owner: "release@mozilla.com"
            source: https://github.com/mozilla/releasetasks

        extra:
            {{ task_notifications("[beetmover] {} {} {} locales partials candidates {}/{}".format(product, branch, platform, chunk, platform_info.chunks), completed=["releasetasks"], failed=["releasetasks"], exception=["releasetasks"]) | indent(12) }}
            {{ common_extras(taskname=partial_beetmover_buildername, locales=chunk_locales, platform=platform) | indent(12)}}
            treeherderEnv:
                - staging
                - production
            treeherder:
                symbol: l10n-{{ chunk }}-{{ partial_version }}
                groupSymbol: BM
                collection:
                    opt: true
                machine:
                    platform: {{ get_treeherder_platform(platform) }}
                build:
                    platform: {{ get_treeherder_platform(platform) }}
{% endif %}

{% endfor %} # partials
{% endif %} # funsize

{% endfor %} # l10n chunks
{% endfor %} # platforms
